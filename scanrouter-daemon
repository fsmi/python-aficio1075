#!/bin/bash

function process {
  if [ $3 == ".end" ]; then
    VERZEICHNIS=$1
    echo $VERZEICHNIS
    pages=$(cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep subdocCount|sed -e s/"[ ]*<[^>]*>[ ]*"//g)
    contenttype=$(cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep contentType|sed -e s/"[ ]*<[^>]*>[ ]*"//g)

    TEMPFILE=$(mktemp "/tmp/scantool-XXXXXX")
    if [ $contenttype == "image/tiff" ]; then
      for i in $(seq 1 $pages); do
        tiff2pdf -o $TEMPFILE-$i.pdf $VERZEICHNIS/page$(printf %04d $i).tif
      done
    fi

    if [ $contenttype == "image/jpeg" ]; then
      # sollte funktionieren, sofern der Drucker den contenttype richtig setzt...
      for i in $(seq 1 $pages); do
        jpegtopnm $VERZEICHNIS/page$(printf %04d $i).jpg > $TEMPFILE-$i.pnm
        pnmtops $TEMPFILE-$i.pnm|ps2pdf - $TEMPFILE-$i.pdf
      done
    fi

    receivercount=$(cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep receiverCount|sed -e s/"[ ]*<[^>]*>[ ]*"//g)
    if [ $receivercount -gt 1 ]; then
      echo "loopstart"
      cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep receiverName|sed -e s/"[ ]*<[^>]*>[ ]*"/" Cg== "/g|perl -M"MIME::Base64" -ne 'print decode_base64($_)'|grep -v "^$"
      for encodedreceiver in $(cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep receiverName|sed -e s/" "/"_"/g); do
        receiver=$(echo $encodedreceiver|sed -e s/"[_]*<[^>]*>"//g|perl -M"MIME::Base64" -ne 'print decode_base64($_)')
	output $receiver $TEMPFILE
      done
      echo "loopdone"
    else
      receiver=$(cat $VERZEICHNIS/docinfo.xml|xmlstarlet fo|grep receiverName|sed -e s/"[ ]*<[^>]*>[ ]*"//g|perl -M"MIME::Base64" -ne 'print decode_base64($_)')
      echo $receiver
      output $receiver $TEMPFILE
#      outputdir=$(grep "^$receiver" $scanrouterconfig|cut -d"," -f2)
#      if [ ! -e $outputdir/$filebasename.pdf ]; then
#        cp $TEMPFILE.pdf $outputdir/$filebasename.pdf
#      else
#        i=0
#        while [ -e $outputdir/$filebasename-$i.pdf ]; do
#          i=$(($i+1))
#        done
#        cp $TEMPFILE.pdf $outputdir/$filebasename-$i.pdf 
#      fi
    fi
  # Jetzt sollten wir wohl noch aufr√§umen..
  rm $TEMPFILE*
  fi
}

function output {
outputtype=$(grep "^$1" $scanrouterconfig|cut -d"," -f3)

# Ausgabeoption "plain" (bzw. falls keine Option angegeben), packe einfach alles, was du bekommen hast in ein PDF und lege es in ein Verzeichnis
if [ x$outputtype == "xplain" ] || [ x$outputtype == "x" ]; then
outputdir=$(grep "^$receiver" $scanrouterconfig|cut -d"," -f2)
filebasename=$(date +%Y%m%d%H%M);
pdftk $(for j in $(seq 1 $pages); do echo -n "$2-$j.pdf "; done) cat output $outputdir/$filebasename-$(i=0;while [ -e $outputdir/$filebasename-$i.pdf ]; do i=$(($i+1)); done; echo $i).pdf
fi

# Ausgabeoption "protokoll", packe alle nicht-leeren Seiten in ein PDF und lege es mit fortlaufender Nummer in ein Verzeichnis
if [ x$outputtype == "xprotokoll" ]; then
outputdir=$(grep "^$receiver" $scanrouterconfig|cut -d"," -f2)
filebasename=$(date +%Y%m%d%H%M);
pdftk $(for j in $(seq 1 $pages); do if [ $(ls -l $2-$j.pdf|sed -e s/"  "/" "/g|cut -d" " -f 5) -gt 50000 ]; then echo "$2-$j.pdf "; fi; done) cat output $outputdir/$(i=0;while [ -e $outputdir/$i.pdf ]; do i=$(($i+1)); done; echo $i).pdf
fi
}



scanrouterconfig="scanrouter-daemon.conf"
inotifywait -mr -e CREATE /home/ftp/d0000746f9bf7/|while read line; do process $line; done

